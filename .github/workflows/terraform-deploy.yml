# Terraform Deployment CI/CD Pipeline
# Author: Adrian Johnson <adrian207@gmail.com>
# Description: Automated Terraform deployment with validation and security scanning

name: Terraform Deploy

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'terraform/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - test
          - prod

env:
  TF_VERSION: '1.6.0'
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  terraform-validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: terraform/

      - name: Terraform Init (Dev)
        run: terraform init -backend=false
        working-directory: terraform/environments/dev

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform/environments/dev

  terraform-security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: terraform-validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: terraform/
          soft_fail: false

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: terraform/
          framework: terraform
          soft_fail: false

  terraform-plan-dev:
    name: Plan - Dev
    runs-on: ubuntu-latest
    needs: [terraform-validate, terraform-security-scan]
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="key=configmgmt-dev.tfstate"
        working-directory: terraform/environments/dev

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: terraform/environments/dev

      - name: Upload Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan-dev
          path: terraform/environments/dev/tfplan

  terraform-apply-dev:
    name: Apply - Dev
    runs-on: ubuntu-latest
    needs: terraform-plan-dev
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan-dev
          path: terraform/environments/dev

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="key=configmgmt-dev.tfstate"
        working-directory: terraform/environments/dev

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: terraform/environments/dev

      - name: Extract Outputs
        id: outputs
        run: |
          terraform output -json > outputs.json
          echo "outputs=$(cat outputs.json)" >> $GITHUB_OUTPUT
        working-directory: terraform/environments/dev

  terraform-plan-prod:
    name: Plan - Prod
    runs-on: ubuntu-latest
    needs: [terraform-validate, terraform-security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="key=configmgmt-prod.tfstate"
        working-directory: terraform/environments/prod

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: terraform/environments/prod

      - name: Upload Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan-prod
          path: terraform/environments/prod/tfplan

  terraform-apply-prod:
    name: Apply - Prod
    runs-on: ubuntu-latest
    needs: terraform-plan-prod
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: prod-approval
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan-prod
          path: terraform/environments/prod

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="key=configmgmt-prod.tfstate"
        working-directory: terraform/environments/prod

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: terraform/environments/prod

      - name: Notify Success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: ${{ job.status }}
          text: 'Production infrastructure deployed successfully'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}


